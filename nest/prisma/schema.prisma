// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Voici un commentaire pour expliquer mon THOT process

enum StatusType {
    ONLINE
    OFFLINE
    BUSY
    AWAY
    INVISIBLE
    TA_GRAND_MERE
}

enum GameStatusType {
    NONE
    WAITING
    INGAME
}

model User {
    id         String  @id @default(uuid())
    id42       Int     @unique
    userName   String  @unique
    email      String  @unique
    avatarPath String?

    twoFaEnabled Boolean @default(false)
    twoFaSecret  String?

    createdAt  DateTime       @default(now())
    status     StatusType     @default(OFFLINE)
    gameStatus GameStatusType @default(NONE)

    friends  User[] @relation("friendList")
    friendTo User[] @relation("friendList")

    blacklist     User[] @relation("blacklist")
    blacklistedBy User[] @relation("blacklist")

    matchHistory PlayerGame[]
    playStats    PlayStats?
    channels     ChannelMember[]
    messages     Message[]
}

model Game {
    id       String       @id @default(uuid())
    playedAt DateTime     @default(now())
    players  PlayerGame[]
    // p1Id    String
    // p2Id    String
}

model PlayerGame {
    player   User   @relation(fields: [playerId], references: [id], onDelete: Cascade)
    playerId String
    game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId   String
    score    Int

    @@id([playerId, gameId])
}

model PlayStats {
    user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String @unique
    wins               Int    @default(0)
    losses             Int    @default(0)
    rank               Int    @default(0)
    points             Int    @default(0)
    achievement_points Int    @default(0)
}

// normalement ca ca marche

model Channel {
    id          String @id @default(uuid())
    channelName String

    members   ChannelMember[]
    messages  Message[]
    mode      ChannelModeType
    whitelist String[]

    hash      String?
    createdAt DateTime @default(now())
}

enum ChannelModeType {
    PUBLIC
    PRIVATE
    PROTECTED
    PRIVMSG
}

model ChannelMember {
    channel     Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
    channelId   String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    role        RoleType
    banExpires  DateTime? @default(now())
    muteExpires DateTime? @default(now())
    timeJoined  DateTime  @default(now())

    @@id([userId, channelId])
}

enum RoleType {
    OWNER
    ADMIN
    MEMBER
	INVITED
    MUTED
    BANNED
}

model Message {
    id        String   @id @default(uuid())
    sender    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
    channelId String
    createdAt DateTime @default(now())
    content   String   @db.VarChar(2000)
}
